import os
import sys
import asyncio
import nest_asyncio
from dotenv import load_dotenv
import streamlit as st
import base64
from streamlit_chat import message as st_message
import time
from scrap.scrapper import WebScrapper
from rag.summarization import WebSummarizer
from rag.ingest import EmbeddingIngestor
from rag.chatbot import ChatBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

load_dotenv()
nest_asyncio.apply()

MODELS = {
    "Deepseek": "deepseek-r1:1.5b",
    "Qwen": "qwen2.5:1.5b",
    "Llama": "llama3.2:3b",
    "Hermes": "hermes3:3b",
}

# –°–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if "model" not in st.session_state:
    st.session_state.model = MODELS["Qwen"]
if "url_submitted" not in st.session_state:
    st.session_state.url_submitted = False
if "extraction_done" not in st.session_state:
    st.session_state.extraction_done = False
if "extracted_text" not in st.session_state:
    st.session_state.extracted_text = ""
if "embedding_done" not in st.session_state:
    st.session_state.embedding_done = False
if "vectorstore" not in st.session_state:
    st.session_state.vectorstore = None
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "summary" not in st.session_state:
    st.session_state.summary = ""

st.set_page_config(layout="wide", page_title="Web-ChatBot")
st.title("ü§ñ Chatbot —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM + RAG")

page = st.sidebar.selectbox("Menu", ["Home", "Deepseek", "Qwen", "Llama", "Hermes"])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ GIF-—Ñ–∞–π–ª–∞
def load_image_as_base64(image_path):
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"File not found: {image_path}")

    with open(image_path, "rb") as f:
        return base64.b64encode(f.read()).decode("utf-8")


# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Å–∫—Ä–∏–ø—Ç—É
current_dir = os.path.dirname(os.path.abspath(__file__))

# –ü—É—Ç–∏ –∫ GIF-—Ñ–∞–π–ª–∞–º
bot_gif_path = os.path.join(current_dir, "images", "bot.gif")
ai_gif_path = os.path.join(current_dir, "images", "ai.gif")
robot_gif_path = os.path.join(current_dir, "images", "robot.gif")

# –ó–∞–≥—Ä—É–∂–∞–µ–º GIF-—Ñ–∞–π–ª—ã
try:
    bot_gif = load_image_as_base64(bot_gif_path)
    ai_gif = load_image_as_base64(ai_gif_path)
    robot_gif = load_image_as_base64(robot_gif_path)
except FileNotFoundError as e:
    st.error(f"–û—à–∏–±–∫–∞: {e}")

if page == "Home":
    st.markdown("""
<style>
.welcome-box {
    background: linear-gradient(135deg, #1e1e2f, #2a2a40);
    padding: 30px;
    border-radius: 15px;
    color: white;
    box-shadow: 0 8px 16px rgba(0,0,0,0.3);
    font-family: 'Segoe UI', sans-serif;
}
.welcome-box h2 {
    color: #00ffd5;
    border-left: 5px solid #ff9900;
    padding-left: 10px;
    margin-bottom: 20px;
}
.welcome-box ul {
    list-style: none;
    padding-left: 20px;
}
.welcome-box li::before {
    content: "‚ú®";
    margin-right: 8px;
}
.tech-title {
    color: #ff9900;
    font-weight: bold;
}
.bot-name {
    color: #00ffd5;
    font-weight: bold;
}
</style>
<div class="welcome-box">
    <h2>ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <span class="bot-name">Web-ChatBot</span>!</h2>
     –≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–æ–±—Ä–∞–Ω–Ω—ã–π –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–ª–æ–≤—É —Ç–µ—Ö–Ω–∏–∫–∏.
    üîß –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    üï∑Ô∏è –í–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥
    üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    üß† –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    üí¨ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç-–±–æ—Ç–∞
    üõ† –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
            LLM: deepseek-r1:1.5b, qwen2.5:1.5b, llama3.2:3b, hermes3:3b
    –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ!
    ü§ñ P.S. –û–Ω –∏–Ω–æ–≥–¥–∞ –æ—à–∏–±–∞–µ—Ç—Å—è, –Ω–æ –≤—Å–µ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ
""", unsafe_allow_html=True)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–∏—Ñ–æ–∫
    st.markdown(f"""
    <div style="text-align: center; margin: 20px;">
        <img src="data:image/gif;base64,{bot_gif}" width="300" style="border-radius: 12px; margin-bottom: 20px;">
        <img src="data:image/gif;base64,{ai_gif}" width="300" style="border-radius: 12px;">
    </div>
    """, unsafe_allow_html=True)
else:
    st.session_state.model = MODELS[page]
    with st.sidebar:
        model_name = st.session_state.model
        st.sidebar.markdown(
            f"""
    <style>
    @keyframes fadeIn {{
      from {{ opacity: 0; transform: translateY(-10px); }}
      to {{ opacity: 1; transform: translateY(0); }}
    }}
    .fade-in {{
        animation: fadeIn 0.6s ease forwards;
        font-size: 18px;
        color: #6a1b9a;
        font-weight: bold;
    }}
    </style>
    <div class="fade-in">Model: <code style="color:#e67e22;">{st.session_state.model}</code> ü§ñ</div>
    """,
            unsafe_allow_html=True
        )
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö
        st.markdown("""
    <div style="margin-top: 20px; font-size: 14px; color: #ddd;">
        <strong>–ß—Ç–æ —É–º–µ—é:</strong><br>
        üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–æ–≤ ‚Äî –ª–æ–≤–ª—é –≤—Å—ë, –¥–∞–∂–µ –≥–¥–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç<br>
        üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –æ –≥–ª–∞–≤–Ω–æ–º<br>
        üß† RAG + FAISS ‚Äî –∫–∞–∫ —à–∏—Ñ—Ä–æ–≤–∫–∞ –∑–Ω–∞–Ω–∏–π<br>
        üí¨ –ß–∞—Ç-–±–æ—Ç ‚Äî –æ—Ç–≤–µ—á–∞—é, –∫–∞–∫ –±—É–¥—Ç–æ –≤—Å—ë –∑–Ω–∞—é üòé
    </div>
""", unsafe_allow_html=True)
        # –ê–≤—Ç–æ—Ä—ã
        st.markdown("""
        <div style="margin-top: 20px; font-size: 14px; color: #fff; text-align: left;">
            <strong>üíª –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:</strong><br>
            &nbsp;&nbsp;&nbsp;&nbsp; –°–∏–≤–æ–ª–æ–±–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä<br>
            &nbsp;&nbsp;&nbsp;&nbsp; –ì–æ–ª–¥–æ–±–∏–Ω –ö–∏—Ä–∏–ª–ª<br>
            &nbsp;&nbsp;&nbsp;&nbsp; –ß—É–º–∞–∫ –ê—Ä—Ç–µ–º–∏–π<br>
            &nbsp;&nbsp;&nbsp;&nbsp; –°–µ–≤–æ—è–Ω –í–∞–≥—Ä–∞–º
        </div>
        """, unsafe_allow_html=True)
        st.markdown("""
        <div style="margin-top: 20px; font-size: 12px; color: #aaa; text-align: center;">
            ¬© 2025 Web-ChatBot<br>by –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞
        </div>
        """, unsafe_allow_html=True)
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞
        st.markdown(
            f'<img src="data:image/gif;base64,{robot_gif}" width="100" style="border-radius: 12px; display: block; margin: 0 auto;">',
            unsafe_allow_html=True
        )

        with open(r"C:\PC\PycharmProjects\Lab_2\lab01_2\images\robot.gif", "rb") as f:
            data = base64.b64encode(f.read()).decode("utf-8")
        st.markdown(
            f'<img src="data:image/gif;base64,{data}" width="100" style="border-radius: 12px; display: block; margin: 0 auto;">',
            unsafe_allow_html=True
        )
    with st.form("url_form"):
        url_input = st.text_input("Enter a URL to crawl:")
        submit_url = st.form_submit_button("Submit URL")

        if submit_url and url_input:
            st.session_state.url_submitted = True
            st.session_state.extraction_done = False
            st.session_state.embedding_done = False
            st.session_state.chat_history = []
            st.session_state.summary = ""

    if st.session_state.url_submitted:
        col1, col2 = st.columns(2)

        with col1:
            st.header("1. Web-Scrapping")

            if not st.session_state.extraction_done:
                start_time = time.time()
                with st.spinner("Extracting website..."):
                    scraper = WebScrapper()
                    extracted = asyncio.run(scraper.crawl(url_input))
                    st.session_state.extracted_text = extracted
                    st.session_state.extraction_done = True
                elapsed = time.time() - start_time
                st.success(f"Extraction complete! Time: {elapsed:.2f}s")

            preview = "\n".join([line for line in st.session_state.extracted_text.splitlines() if line.strip()][:5])
            st.text_area("Extracted Text Preview", preview, height=150)

            st.download_button(
                label="Download Extracted Text",
                data=st.session_state.extracted_text,
                file_name="extract_text.txt",
                mime="text/plain",
            )

            st.markdown("---")

            st.header("2. Web-Summarization")

            if st.button("Summarize Web Page", key="summarize_button"):
                start_time = time.time()
                with st.spinner("Summarizing..."):
                    summarizer = WebSummarizer()
                    st.session_state.summary = summarizer.summarize(st.session_state.extracted_text)
                elapsed = time.time() - start_time
                st.success(f"Summarization complete! Time: {elapsed:.2f}s")

            if st.session_state.summary:
                st.subheader("Summarized Output")
                st.markdown(st.session_state.summary, unsafe_allow_html=False)

        with col2:
            st.header("3. Create Embeddings")

            if st.session_state.extraction_done and not st.session_state.embedding_done:
                if st.button("Create Embeddings"):
                    start_time = time.time()
                    with st.spinner("Creating embeddings..."):
                        embeddings = EmbeddingIngestor()
                        st.session_state.vectorstore = embeddings.create_embeddings(st.session_state.extracted_text)
                        st.session_state.embedding_done = True
                    elapsed = time.time() - start_time
                    st.success(f"Vectors are created! Time: {elapsed:.2f}s")

            elif st.session_state.embedding_done:
                st.info("Embeddings have been created.")

            st.markdown("---")

            st.header("4. ChatBot")

            if st.session_state.embedding_done:
                chatbot = ChatBot(st.session_state.vectorstore)
                user_input = st.text_input("Your Message:", key="chat_input")

                if st.button("Send", key="send_button") and user_input:
                    start_time = time.time()
                    bot_answer = chatbot.qa(user_input)
                    elapsed = time.time() - start_time

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    st.session_state.chat_history.append({
                        "user": user_input,
                        "bot": bot_answer,
                        "time": elapsed
                    })

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª
                    chat_file_content = "\n\n".join([
                        f"User: {chat['user']}\nBot: {chat['bot']}\nTime: {chat.get('time', 0):.2f}s"
                        for chat in st.session_state.chat_history
                    ])
                    with open("history/chat_history.txt", "w", encoding="utf-8") as cf:
                        cf.write(chat_file_content)
                if st.session_state.chat_history:
                    for chat in st.session_state.chat_history:
                        st_message(chat["user"], is_user=True)
                        st_message(
                            f"{chat['bot']}\n\n {chat.get('time', 0):.2f}s",
                            is_user=False
                        )

            else:
                st.info("Please create embeddings to activate the chat.")
